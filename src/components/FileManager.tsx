import React, { useState, useEffect } from 'react'
import { excelService } from '../services'
import { API_CONFIG, API_ENDPOINTS } from '../services/config'
import type { ExcelFile } from '../types'

type ActivePage = 'dashboard' | 'files' | 'data' | 'comparison' | 'history'

interface FileManagerProps {
  onFileSelect: (fileName: string) => void
  onNavigate: (page: ActivePage) => void
}

const FileManager: React.FC<FileManagerProps> = ({ onFileSelect, onNavigate }) => {
  const [files, setFiles] = useState<ExcelFile[]>([])
  const [loading, setLoading] = useState(false)
  const [selectedFile, setSelectedFile] = useState<File | null>(null)
  const [uploadedBy, setUploadedBy] = useState('')
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState<string | null>(null)
  const [connectionStatus, setConnectionStatus] = useState<'unknown' | 'connected' | 'disconnected'>('unknown')

  useEffect(() => {
    const initializeComponent = async () => {
      await testConnection()
      await fetchFiles()
    }
    initializeComponent()
  }, []) // eslint-disable-line react-hooks/exhaustive-deps

  const clearMessages = () => {
    setError(null)
    setSuccess(null)
  }

  const testConnection = async () => {
    console.log('üîç Starting connection test...')
    try {
      const response = await excelService.testConnection()
      console.log('üìã Test connection response:', response)
      
      const isConnected = response.success === true
      setConnectionStatus(isConnected ? 'connected' : 'disconnected')
      
      if (!isConnected) {
        setError(`Backend baƒülantƒ± testi ba≈üarƒ±sƒ±z: ${response.message || 'Bilinmeyen hata'}`)
      } else {
        console.log('‚úÖ Backend connection successful')
        // Ba≈üarƒ±lƒ± baƒülantƒ±da hata mesajƒ±nƒ± temizle
        if (error && error.includes('Backend baƒülantƒ±sƒ± kurulamadƒ±')) {
          setError(null)
        }
      }
    } catch (error) {
      console.error('‚ùå Connection test error:', error)
      setConnectionStatus('disconnected')
      setError(`Backend baƒülantƒ±sƒ± kurulamadƒ±: ${error.message || 'Bilinmeyen hata'}`)
    }
  }

  const fetchFiles = async () => {
    setLoading(true)
    clearMessages()
    try {
      const response = await excelService.getFiles()
      if (response.success) {
        setFiles(response.data || [])
      } else {
        setError(response.message || 'Dosyalar y√ºklenirken hata olu≈ütu')
      }
    } catch (error) {
      console.error('Dosyalar y√ºklenirken hata:', error)
      setError('Backend baƒülantƒ±sƒ± kurulamadƒ±. L√ºtfen backend servisinin √ßalƒ±≈ütƒ±ƒüƒ±ndan emin olun.')
    } finally {
      setLoading(false)
    }
  }

  const validateFile = (file: File): string | null => {
    // Dosya boyutu kontrol√º (10MB limit)
    const maxSize = 10 * 1024 * 1024 // 10MB
    if (file.size > maxSize) {
      return `Dosya boyutu √ßok b√ºy√ºk (${(file.size / 1024 / 1024).toFixed(2)}MB). Maximum 10MB desteklenir.`
    }
    
    // Dosya uzantƒ±sƒ± kontrol√º
    const allowedExtensions = ['.xlsx', '.xls']
    const fileName = file.name.toLowerCase()
    const hasValidExtension = allowedExtensions.some(ext => fileName.endsWith(ext))
    
    if (!hasValidExtension) {
      return `Desteklenmeyen dosya formatƒ±. L√ºtfen .xlsx veya .xls formatƒ±nda dosya y√ºkleyin.`
    }
    
    // MIME type kontrol√º
    const allowedMimeTypes = [
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx
      'application/vnd.ms-excel' // .xls
    ]
    
    if (file.type && !allowedMimeTypes.includes(file.type)) {
      console.warn('‚ö†Ô∏è MIME type not in allowed list:', file.type)
      // MIME type uyarƒ±sƒ± ver ama engelme, √ß√ºnk√º bazƒ± sistemlerde farklƒ± olabilir
    }
    
    return null // Ge√ßerli dosya
  }

  const handleFileUpload = async () => {
    if (!selectedFile || !uploadedBy.trim()) {
      setError('L√ºtfen dosya se√ßin ve y√ºkleyen ki≈üi bilgisini girin')
      return
    }

    // Dosya validasyonu
    const validationError = validateFile(selectedFile)
    if (validationError) {
      setError(validationError)
      return
    }

    setLoading(true)
    clearMessages()
    try {
      console.log('üì§ Starting file upload...', selectedFile.name)
      console.log('üìÑ File details:', {
        name: selectedFile.name,
        size: selectedFile.size,
        type: selectedFile.type,
        lastModified: new Date(selectedFile.lastModified).toISOString()
      })
      
      // 1. Dosyayƒ± y√ºkle
      const uploadResponse = await excelService.uploadFile(selectedFile, uploadedBy)
      console.log('üìã Upload response:', uploadResponse)
      
      if (!uploadResponse.success) {
        setError(uploadResponse.message || 'Dosya y√ºklenirken hata olu≈ütu')
        return
      }
      
      setSuccess('Dosya ba≈üarƒ±yla y√ºklendi! Excel verileri i≈üleniyor...')
      
      // 2. Y√ºklenen dosyanƒ±n Excel verilerini i≈üle
      console.log('üîÑ Processing Excel data for:', selectedFile.name)
      try {
        const readResponse = await excelService.readExcelData(selectedFile.name)
        console.log('üìã Read Excel response:', readResponse)
        
        if (readResponse.success) {
          setSuccess('Dosya ba≈üarƒ±yla y√ºklendi ve i≈ülendi! Artƒ±k veri g√∂r√ºnt√ºleme sayfasƒ±nda g√∂r√ºnt√ºleyebilirsiniz.')
        } else {
          console.warn('‚ö†Ô∏è Excel processing failed:', readResponse.message)
          setError(`Dosya y√ºklendi ancak Excel i≈üleme sƒ±rasƒ±nda hata olu≈ütu: ${readResponse.message || 'Bilinmeyen hata'}. 
                   
Muhtemel sebepler:
‚Ä¢ Excel dosya formatƒ± desteklenmiyor
‚Ä¢ Dosya bozuk veya ≈üifrelenmi≈ü
‚Ä¢ Dosyada bo≈ü sayfalar var
‚Ä¢ Backend'de Excel i≈üleme servisi sorunu ya≈üƒ±yor

L√ºtfen farklƒ± bir Excel dosyasƒ± deneyin veya mevcut dosyayƒ± yeniden kaydedin.`)
        }
      } catch (readError) {
        console.error('‚ùå Excel processing error:', readError)
        const errorMessage = readError instanceof Error ? readError.message : 'Bilinmeyen hata'
        
        if (errorMessage.includes('500')) {
          setError(`Dosya y√ºklendi ancak Excel i≈üleme sƒ±rasƒ±nda sunucu hatasƒ± olu≈ütu.
          
Muhtemel sebepler:
‚Ä¢ Excel dosyasƒ± √ßok b√ºy√ºk olabilir
‚Ä¢ Dosya formatƒ± desteklenmiyor (.xlsx, .xls deneyin)
‚Ä¢ Backend servisi Excel dosyayƒ± i≈üleyemiyor
‚Ä¢ Database baƒülantƒ± sorunu

L√ºtfen:
1. Dosya boyutunu kontrol edin (max 10MB √∂nerilir)
2. .xlsx formatƒ±nda kaydedin
3. Backend loglarƒ±nƒ± kontrol edin
4. Farklƒ± bir Excel dosyasƒ± deneyin`)
        } else {
          setError(`Dosya y√ºklendi ama Excel i≈üleme sƒ±rasƒ±nda hata olu≈ütu: ${errorMessage}
          
L√ºtfen backend loglarƒ±nƒ± kontrol edin veya sistem y√∂neticinize ba≈üvurun.`)
        }
      }
      
      setSelectedFile(null)
      setUploadedBy('')
      await fetchFiles() // Dosya listesini yenile
      
    } catch (error) {
      console.error('‚ùå File upload error:', error)
      const errorMessage = error instanceof Error ? error.message : 'Bilinmeyen hata'
      setError(`Dosya y√ºklenirken hata olu≈ütu: ${errorMessage}
      
L√ºtfen backend baƒülantƒ±sƒ±nƒ± kontrol edin ve tekrar deneyin.`)
    } finally {
      setLoading(false)
    }
  }

  const handleFileSelect = (fileName: string) => {
    console.log('üìÅ File selected for viewing:', fileName)
    onFileSelect(fileName)
    onNavigate('data')
  }

  const handleReprocessFile = async (fileName: string) => {
    if (!confirm(`"${fileName}" dosyasƒ±nƒ± yeniden i≈ülemek istediƒüinizden emin misiniz?`)) {
      return
    }

    setLoading(true)
    clearMessages()
    try {
      console.log('üîÑ Reprocessing file:', fileName)
      const response = await excelService.readExcelData(fileName)
      console.log('üìã Reprocess response:', response)
      
      if (response.success) {
        setSuccess('Dosya ba≈üarƒ±yla yeniden i≈ülendi! Artƒ±k veri g√∂r√ºnt√ºleme sayfasƒ±nda g√∂r√ºnt√ºleyebilirsiniz.')
        await fetchFiles() // Dosya listesini yenile
      } else {
        console.error('‚ùå Reprocess failed:', response.message)
        setError(`Dosya yeniden i≈ülenirken hata olu≈ütu: ${response.message || 'Bilinmeyen hata'}`)
      }
    } catch (error) {
      console.error('‚ùå Reprocess error:', error)
      const errorMessage = error instanceof Error ? error.message : 'Bilinmeyen hata'
      setError(`Dosya yeniden i≈ülenirken hata olu≈ütu: ${errorMessage}`)
    } finally {
      setLoading(false)
    }
  }

  const handleViewFile = async (fileName: string) => {
    console.log('üëÅÔ∏è Attempting to view file:', fileName)
    
    // √ñnce dosyanƒ±n sheet'lerini kontrol et
    try {
      setLoading(true)
      const sheetsResponse = await excelService.getSheets(fileName)
      console.log('üìã Sheets check response:', sheetsResponse)
      
      if (sheetsResponse.success && sheetsResponse.data && sheetsResponse.data.length > 0) {
        console.log('‚úÖ File has sheets, proceeding to data view')
        handleFileSelect(fileName)
      } else {
        console.warn('‚ö†Ô∏è File has no sheets or failed to load sheets')
        setError(`Dosya "${fileName}" i√ßin sayfa bilgisi bulunamadƒ±. Dosya d√ºzg√ºn y√ºklenmemi≈ü olabilir.`)
        
        // Excel verilerini tekrar i≈ülemeyi dene
        try {
          console.log('üîÑ Attempting to reprocess Excel data...')
          const readResponse = await excelService.readExcelData(fileName)
          if (readResponse.success) {
            setSuccess('Dosya yeniden i≈ülendi. ≈ûimdi g√∂r√ºnt√ºlemeyi deneyebilirsiniz.')
            setTimeout(() => handleFileSelect(fileName), 1000) // 1 saniye bekle
          } else {
            setError('Dosya yeniden i≈ülenirken hata olu≈ütu: ' + (readResponse.message || 'Bilinmeyen hata'))
          }
        } catch (readError) {
          console.error('‚ùå Reprocess error:', readError)
          setError('Dosya yeniden i≈ülenirken hata olu≈ütu.')
        }
      }
    } catch (error) {
      console.error('‚ùå View file error:', error)
      setError('Dosya g√∂r√ºnt√ºlenirken hata olu≈ütu: ' + (error instanceof Error ? error.message : 'Bilinmeyen hata'))
    } finally {
      setLoading(false)
    }
  }

  const handleDeleteFile = async (fileName: string) => {
    if (!confirm(`"${fileName}" dosyasƒ±nƒ± silmek istediƒüinizden emin misiniz?`)) {
      return
    }

    setLoading(true)
    clearMessages()
    try {
      console.log('üóëÔ∏è Attempting to delete file:', fileName)
      const response = await excelService.deleteFile(fileName)
      
      if (response.success) {
        setSuccess('Dosya ba≈üarƒ±yla silindi!')
        await fetchFiles()
      } else {
        console.error('‚ùå Delete response indicates failure:', response)
        setError(response.message || 'Dosya silinirken hata olu≈ütu')
      }
    } catch (error) {
      console.error('‚ùå Delete file error:', error)
      
      // Hata tipine g√∂re daha spesifik mesajlar
      const errorMessage = error instanceof Error ? error.message : 'Bilinmeyen hata'
      if (errorMessage.includes('404')) {
        setError(`Dosya bulunamadƒ±: "${fileName}". Dosya zaten silinmi≈ü olabilir.`)
      } else if (errorMessage.includes('500')) {
        setError('Sunucu hatasƒ±. Backend loglarƒ±nƒ± kontrol edin.')
      } else if (errorMessage.includes('Backend baƒülantƒ±sƒ± kurulamadƒ±')) {
        setError('Backend baƒülantƒ±sƒ± kurulamadƒ±. Servisin √ßalƒ±≈ütƒ±ƒüƒ±ndan emin olun.')
      } else {
        setError(`Dosya silinirken hata olu≈ütu: ${errorMessage}`)
      }
    } finally {
      setLoading(false)
    }
  }

  const handleDownloadFile = async (fileName: string) => {
    try {
      // Basit bir download linki olu≈ütur
      const downloadUrl = `${API_CONFIG.BASE_URL}${API_ENDPOINTS.EXCEL.FILES}/${encodeURIComponent(fileName)}/download`
      const link = document.createElement('a')
      link.href = downloadUrl
      link.download = fileName
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
    } catch (error) {
      console.error('Dosya indirme hatasƒ±:', error)
      setError('Dosya indirilemedi')
    }
  }

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
  }

  if (loading && files.length === 0) {
    return (
      <div className="loading">
        <div className="spinner"></div>
      </div>
    )
  }

  return (
    <div className="file-manager">
      <div className="file-manager-header">
        <h2>Dosya Y√∂netimi</h2>
        <div className="connection-status">
          <span className={`status-indicator ${connectionStatus}`}>
            {connectionStatus === 'connected' ? 'üü¢' : connectionStatus === 'disconnected' ? 'üî¥' : 'üü°'}
          </span>
          <span className="status-text">
            {connectionStatus === 'connected' 
              ? 'Backend Baƒülƒ±' 
              : connectionStatus === 'disconnected' 
              ? 'Backend Baƒülantƒ±sƒ± Yok' 
              : 'Baƒülantƒ± Kontrol Ediliyor'}
          </span>
          <button 
            className="btn btn-sm btn-secondary"
            onClick={testConnection}
            disabled={loading}
          >
            Yeniden Test Et
          </button>
        </div>
      </div>
      
      {/* Error/Success Messages */}
      {error && (
        <div className="alert alert-error">
          {error}
          <button onClick={clearMessages} className="alert-close">√ó</button>
        </div>
      )}
      {success && (
        <div className="alert alert-success">
          {success}
          <button onClick={clearMessages} className="alert-close">√ó</button>
        </div>
      )}
      
      {/* File Upload Section */}
      <div className="file-upload-section">
        <h3>Yeni Dosya Y√ºkle</h3>
        <div className="file-upload-info">
          <p>üìÅ Desteklenen formatlar: .xlsx, .xls</p>
          <p>üìè Maximum dosya boyutu: 10MB</p>
        </div>
        <div className="file-actions">
          <div className="input-group">
            <label htmlFor="file-input">Excel Dosyasƒ±:</label>
            <input
              id="file-input"
              type="file"
              accept=".xlsx,.xls,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.ms-excel"
              onChange={(e) => {
                const file = e.target.files?.[0] || null
                setSelectedFile(file)
                if (file) {
                  const validationError = validateFile(file)
                  if (validationError) {
                    setError(validationError)
                    setSelectedFile(null)
                    e.target.value = '' // Input'u temizle
                  } else {
                    clearMessages()
                  }
                }
              }}
            />
            {selectedFile && (
              <div className="file-info">
                <small>
                  üìÑ {selectedFile.name} ({(selectedFile.size / 1024 / 1024).toFixed(2)}MB)
                </small>
              </div>
            )}
          </div>
          <div className="input-group">
            <label htmlFor="uploader-input">Y√ºkleyen Ki≈üi:</label>
            <input
              id="uploader-input"
              type="text"
              placeholder="Y√ºkleyen ki≈üi"
              value={uploadedBy}
              onChange={(e) => setUploadedBy(e.target.value)}
            />
          </div>
          <button 
            className="btn btn-primary"
            onClick={handleFileUpload}
            disabled={loading || !selectedFile || !uploadedBy.trim()}
          >
            {loading ? 'Y√ºkleniyor...' : 'Dosya Y√ºkle'}
          </button>
        </div>
      </div>

      {/* File List */}
      <div className="file-list">
        {files.length === 0 ? (
          <div className="empty-state">
            <p>Hen√ºz y√ºklenmi≈ü dosya bulunmuyor.</p>
            <p>Yukarƒ±daki forma ile Excel dosyalarƒ±nƒ±zƒ± y√ºkleyebilirsiniz.</p>
          </div>
        ) : (
          files.map((file) => (
            <div key={file.fileName} className="file-item">
              <div className="file-name">{file.fileName}</div>
              <div className="file-meta">
                <div>üìÖ {new Date(file.uploadDate).toLocaleDateString('tr-TR')}</div>
                <div>üë§ {file.uploadedBy}</div>
                <div>üìä {formatFileSize(file.size)}</div>
                {file.recordCount && <div>üìÑ {file.recordCount} kayƒ±t</div>}
              </div>
              <div className="file-actions-inline">
                <button 
                  className="btn btn-primary btn-sm"
                  onClick={() => handleViewFile(file.fileName)}
                  disabled={loading}
                >
                  G√∂r√ºnt√ºle
                </button>
                <button 
                  className="btn btn-secondary btn-sm"
                  onClick={() => handleReprocessFile(file.fileName)}
                  disabled={loading}
                  title="Excel dosyasƒ±nƒ± yeniden i≈üle"
                >
                  üîÑ Yeniden ƒ∞≈üle
                </button>
                <button 
                  className="btn btn-secondary btn-sm"
                  onClick={() => handleDownloadFile(file.fileName)}
                >
                  ƒ∞ndir
                </button>
                <button 
                  className="btn btn-danger btn-sm"
                  onClick={() => handleDeleteFile(file.fileName)}
                  disabled={loading}
                >
                  Sil
                </button>
              </div>
            </div>
          ))
        )}
      </div>

      {loading && files.length > 0 && (
        <div className="loading-overlay">
          <div className="spinner"></div>
        </div>
      )}
    </div>
  )
}

export default FileManager
